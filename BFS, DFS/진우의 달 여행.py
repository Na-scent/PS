# ----------------------------------------------------------------------------------------------

# 문제

# 우주비행이 꿈이였던 진우는 음식점 '매일매일싱싱'에서 열심히 일한 결과 달 여행에 필요한 자금을 모두 마련하였다! 지구와 우주사이는 N X M 행렬로 나타낼 수 있으며 각 원소의 값은 우주선이 그 공간을 지날 때 소모되는 연료의 양이다.

# 진우는 여행경비를 아끼기 위해 조금 특이한 우주선을 선택하였다. 진우가 선택한 우주선의 특징은 아래와 같다.

# 1. 지구 -> 달로 가는 경우 우주선이 움직일 수 있는 방향은 아래와 같다.

# 2. 우주선은 전에 움직인 방향으로 움직일 수 없다. 즉, 같은 방향으로 두번 연속으로 움직일 수 없다.

# 진우의 목표는 연료를 최대한 아끼며 지구의 어느위치에서든 출발하여 달의 어느위치든 착륙하는 것이다.

# 최대한 돈을 아끼고 살아서 달에 도착하고 싶은 진우를 위해 달에 도달하기 위해 필요한 연료의 최소값을 계산해 주자.

# ----------------------------------------------------------------------------------------------

# 입력

# 첫줄에 지구와 달 사이 공간을 나타내는 행렬의 크기를 나타내는 N, M (2≤ N, M ≤ 6)이 주어진다.

# 다음 N줄 동안 각 행렬의 원소 값이 주어진다. 각 행렬의 원소값은 100 이하의 자연수이다.


# ----------------------------------------------------------------------------------------------

# 출력

# 달 여행에 필요한 최소 연료의 값을 출력한다.

# ----------------------------------------------------------------------------------------------

# matrix의 크기가 작아 BFS로도 가능하지만, DP로 푸는 연습할 것.

n, m = map(int, input().split());
matrix = []
dx  = [-1, 0, 1]
result = 999999999;

for _ in range(n):
  matrix.append(list(map(int, input().split())));

# temp : 현재 경로의 연료 합 / r : 현재 경로의 row / 현재 경로의 column / d : 이전 경로에서 이동한 방향 / result : 출발 지점에서의 최소 연료 합

def BFS(temp, r, c, d, result):
  # matrix 끝 도달.
  if r == n:
    # 현재까지의 최소 연료 합과 현재 경로에서의 연료 합 비교
    return min(temp, result)
  
  for i in dx:
    if 0 <= c+i < m and i != d:
      result = BFS(temp + matrix[r][c+i], r+1, c+i, i, result)
      
  return result
for i in range(m):
  result = min(result, BFS(matrix[0][i], 1, i, 2, result))
  
print(result)